#!/usr/bin/env bash

clear

AWS_REGION="us-east-1"
AWS_PROFILE="tworentals"

ACTION=${1}
STAGE=${2:-staging}
NAMESPACE=${3:-api}
ENVIRONMENT=${4:-tworentals}
FILE_PATH=${5:-.secrets-params}

function help {
  echo "Invalid $1!"
  echo ""
  echo "usage: ./bin/secrets [ACTION] [STAGE:staging] [FILE_PATH:.secrets-params]"
  echo ""
  echo "ACTION:"
  echo "  get - Get all secrets from AWS and save to '$FILE_PATH' file."
  echo "  set - Set all secrets from '$FILE_PATH' file and save to AWS SSM and update terraform files."
  echo ""
  echo "STAGE:"
  echo "  staging - staging environment."
  echo "  production - production environment."
  echo ""
  echo "FILE_PATH - path to the secret file. The file name should be without extension!"
  echo "  eg. .secrets-params or ./path/directory/.secrets-params"
  echo ""
  echo "./bin/secrets: error: the following argument is missing or wrong: $1"
  echo ""
  echo ""
  echo "Aborted."
  exit 0
}

if [[ ! $ACTION =~ ^(get|set)$ ]]; then
  help "ACTION"
fi

if [[ ! $STAGE =~ ^(staging|production)$ ]]; then
  help "STAGE"
fi

if [[ ! -z $3 ]]; then
  FILE_NAME="${FILE_PATH##*/}"                         # Strip longest match of */ from start
  BASE="${FILE_NAME%.[^.]*}"                           # Strip shortest match of . plus at least one non-dot char from end
  EXT="${FILE_NAME:${#BASE} + 1}"

  if [[ -z "$BASE" && -n "$EXT" ]]; then              # If we have an extension and no base, it's really the base
    BASE=".$EXT"
    EXT=""
  fi

  if [[ ! -z $EXT ]]; then
    help "FILE_PATH"
  fi
fi


## Get SSM Parameters from AWS
if [[ $ACTION = 'get' ]]; then
  echo "This action will override '$FILE_PATH' file."
  read -r -p "Continue (Y/n)? " CONTINUE

  if [ "$CONTINUE" != "Y" ]; then
    echo "Aborted."
    exit 0
  fi

  rm -rf $FILE_PATH && touch $FILE_PATH

  for Key in `aws ssm describe-parameters | jq -r ".Parameters[] | .Name"`; do
    aws ssm get-parameter --region $AWS_REGION --profile $AWS_PROFILE --name "$Key" --with-decryption | jq -r '"\(.Parameter.Name)=\(.Parameter.Value)"' >> $FILE_PATH
  done

  echo "Done!"
  exit 0
fi


## Set SSM Parameters to AWS
if [[ $ACTION = 'set' ]]; then
  read -r -p "Continue (Y/n)? " CONTINUE

  if [ "$CONTINUE" != "Y" ]; then
    echo "Aborted."
    exit 0
  fi

  SECRETS=""

  while read -r line; do
    KEY="${line%=*}"
    VALUE="${line#*=}"

    if [[ ! -z $KEY ]]; then
      KEY_NAME=$(basename $KEY)
      KEY_ID=$(echo $KEY_NAME | awk '{print tolower($0)}')
      STAGE_NAME=$(basename $(dirname $KEY))
      DYNAMIC_STAGE_NAME="shared"

      if [[ $STAGE_NAME != 'shared' ]]; then
        DYNAMIC_STAGE_NAME='${var.stage}'
      fi

      # NOTE: We don't want to update DATABASE_* & S3_STORAGE_BUCKET params
      VARS_REGEX="^(DATABASE_|S3_STORAGE_BUCKET$)"

      if [[ ! $KEY_NAME =~ $VARS_REGEX ]]; then
        if [[ $STAGE_NAME == 'staging' || $STAGE_NAME == 'shared' ]]; then
          SECRETS+="{\n"
          SECRETS+="\tname = \"$KEY_NAME\"\n"
          if [[ ! -z $VALUE ]]; then
            SECRETS+="\tvalue = \"/\${var.environment}/\${var.namespace}/$DYNAMIC_STAGE_NAME/$KEY_NAME\"\n"
          else
            SECRETS+="\tvalue = \"\"\n"
          fi
          SECRETS+="},\n"
        fi

        if [[ ! -z $VALUE ]]; then
          AWS_PAGER="" aws ssm put-parameter --region $AWS_REGION --profile $AWS_PROFILE --type "SecureString" --name "$KEY" --value "$VALUE" --overwrite
        fi
      fi
    fi
  done < $FILE_PATH

  echo "\n\n\n"
  echo -e $SECRETS

  # cat $TERRAFORM_LOCALS_FILE | tr '\n' '\z' | sed -E 's/secrets = \[^\]]+\]/secrets = []/g' | tr '\z' '\n' | sed "2s|.*|$SECRETS|" | tee $TERRAFORM_LOCALS_FILE
fi
